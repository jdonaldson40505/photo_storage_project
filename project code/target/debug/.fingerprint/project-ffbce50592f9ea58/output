{"message":"unused import: `futures::Future`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests\\tests.rs","byte_start":67,"byte_end":82,"line_start":4,"line_end":4,"column_start":6,"column_end":21,"is_primary":true,"text":[{"text":" use futures::Future;","highlight_start":6,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests\\tests.rs","byte_start":63,"byte_end":83,"line_start":4,"line_end":4,"column_start":2,"column_end":22,"is_primary":true,"text":[{"text":" use futures::Future;","highlight_start":2,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `futures::Future`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtests\\tests.rs:4:6\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m use futures::Future;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::borrow::Borrow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests\\tests.rs","byte_start":203,"byte_end":222,"line_start":10,"line_end":10,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"use std::borrow::Borrow;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests\\tests.rs","byte_start":199,"byte_end":223,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"use std::borrow::Borrow;","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::borrow::Borrow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtests\\tests.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse std::borrow::Borrow;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `futures_await_test`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests\\tests.rs","byte_start":229,"byte_end":247,"line_start":11,"line_end":11,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use futures_await_test;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"tests\\tests.rs","byte_start":225,"byte_end":248,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use futures_await_test;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `futures_await_test`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtests\\tests.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse futures_await_test;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"no method named `get` found for type `project::UserId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n"},"level":"error","spans":[{"file_name":"tests\\tests.rs","byte_start":3317,"byte_end":3320,"line_start":98,"line_end":98,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"    assert_eq!(images.get(UserId(someValue).get(PhotoId(999)).unwrap()), Some (Photo(vec_to_test_photos)));","highlight_start":45,"highlight_end":48}],"label":"method not found in `project::UserId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `get` found for type `project::UserId` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtests\\tests.rs:98:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    assert_eq!(images.get(UserId(someValue).get(PhotoId(999)).unwrap()), Some (Photo(vec_to_test_photos)));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `project::UserId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"<::core::macros::assert_eq macros>","byte_start":156,"byte_end":167,"line_start":7,"line_end":7,"column_start":34,"column_end":45,"is_primary":true,"text":[{"text":"             if ! (* left_val == * right_val)","highlight_start":34,"highlight_end":45}],"label":"expected reference, found struct `project::Photo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests\\tests.rs","byte_start":3277,"byte_end":3380,"line_start":98,"line_end":98,"column_start":5,"column_end":108,"is_primary":false,"text":[{"text":"    assert_eq!(images.get(UserId(someValue).get(PhotoId(999)).unwrap()), Some (Photo(vec_to_test_photos)));","highlight_start":5,"highlight_end":108}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"<::core::macros::assert_eq macros>","byte_start":0,"byte_end":940,"line_start":1,"line_end":36,"column_start":1,"column_end":6,"is_primary":false,"text":[{"text":"($ left : expr, $ right : expr) =>","highlight_start":1,"highlight_end":35},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& $ left, & $ right)","highlight_start":1,"highlight_end":33},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#,","highlight_start":1,"highlight_end":18},{"text":"                  & * left_val, & * right_val)","highlight_start":1,"highlight_end":47},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ; ($ left : expr, $ right : expr,) =>","highlight_start":1,"highlight_end":42},{"text":"({ $ crate :: assert_eq ! ($ left, $ right) }) ;","highlight_start":1,"highlight_end":49},{"text":"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>","highlight_start":1,"highlight_end":53},{"text":"({","highlight_start":1,"highlight_end":3},{"text":"     match (& ($ left), & ($ right))","highlight_start":1,"highlight_end":37},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         (left_val, right_val) =>","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             if ! (* left_val == * right_val)","highlight_start":1,"highlight_end":46},{"text":"             {","highlight_start":1,"highlight_end":15},{"text":"                 panic !","highlight_start":1,"highlight_end":25},{"text":"                 (r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":57},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#,","highlight_start":1,"highlight_end":22},{"text":"                  & * left_val, & * right_val, $ crate :: format_args !","highlight_start":1,"highlight_end":72},{"text":"                  ($ ($ arg) +))","highlight_start":1,"highlight_end":33},{"text":"             }","highlight_start":1,"highlight_end":15},{"text":"         }","highlight_start":1,"highlight_end":11},{"text":"     }","highlight_start":1,"highlight_end":7},{"text":" }) ;","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected enum `std::option::Option<&std::collections::HashMap<project::PhotoId, project::Photo>>`\n   found enum `std::option::Option<project::Photo>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mtests\\tests.rs:98:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    assert_eq!(images.get(UserId(someValue).get(PhotoId(999)).unwrap()), Some (Photo(vec_to_test_photos)));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected reference, found struct `project::Photo`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected enum `std::option::Option<\u001b[0m\u001b[0m\u001b[1m&std::collections::HashMap<project::PhotoId, project::Photo>\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found enum `std::option::Option<\u001b[0m\u001b[0m\u001b[1mproject::Photo\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0308, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
